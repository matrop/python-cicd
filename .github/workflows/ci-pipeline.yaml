name: Continuous Integration

# Run only on main and feature branches if Python files were changed
on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main

env:
  PYTHON_IMAGE: 'python:3.12-slim'
  POETRY_VERSION: 2.1.2
  
jobs:
  test-and-check:
    name: Test and Check Python Code
    runs-on: ubuntu-latest
    container: python:3.12-slim # TODO: How to use a variable here?
    env:
      POETRY_HOME: '/opt/poetry'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Poetry
        run: |
          python -m venv $POETRY_HOME
          $POETRY_HOME/bin/pip install --no-cache-dir poetry==$POETRY_VERSION
      
      - name: Install Dependencies
        run: |
          cd $GITHUB_WORKSPACE
          $POETRY_HOME/bin/poetry install --no-root --no-interaction --with=dev
      
      - name: Run Pytest
        run: |
          $POETRY_HOME/bin/poetry run pytest tests/ -v

      - name: Run Format Check
        run: |
          $POETRY_HOME/bin/poetry run black --check src/ tests/

      - name: Run Linting
        run: |
          $POETRY_HOME/bin/poetry run mypy src/
      
      - name: Run SAST
        run: |
          $POETRY_HOME/bin/poetry run bandit src/ -r -ll  # Report medium vulnerabilities or higher
          # TODO (matrops): One could invest more effort here to generate SARIF files and integrate them in GitHub Security Monitoring
  
  scan:
    name: Scan Docker Resources
    runs-on: ubuntu-latest
    permissions:
      # Needed for SARIF upload
      security-events: write
      actions: read
      contents: read
    env: 
      PROJECT_IMAGE_NAME: shortwave6046/tmp-image:latest # TODO: Secret!
      IMAGE_TARBALL_PATH: ${{ format('{0}/built_image.tar', runner.temp }}
      TRIVY_REPORT_DIR: /tmp/trivy_reports
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          # According to https://trivy.dev/latest/getting-started/installation/#debianubuntu-official
          # Hint: I'm aware that Trivy has a GitHub Action, this is just for learning purposes
          sudo apt-get update
          sudo apt-get install wget gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      # Setup a DockerCLI plugin for Build Kit. Used to export the cache
      # Recommended in https://github.com/docker/build-push-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Project Docker Image
        uses: docker/build-push-action@v6
        with:
          push: false
          tags: ${{ env.PROJECT_IMAGE_NAME }}
          outputs: type=docker,dest=${{ env.IMAGE_TARBALL_PATH }}
      
      - name: Setup Trivy Reports Directory
        run: |
          mkdir -p $TRIVY_REPORT_DIR
          echo "Test" > $TRIVY_REPORT_DIR/debug.txt

      - name: Run Trivy Image Scan
        run: |
          trivy image --severity HIGH,CRITICAL --format sarif -o trivy-image-report.sarif $PROJECT_IMAGE_NAME

      - name: Upload Trivy Image Scan Result
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image-report.sarif
          category: trivy-image-report

      - name: Run Trivy Dockerfile Scan
        run: |
          trivy config --severity HIGH,CRITICAL --format sarif -o trivy-dockerfile-report.sarif .

      - name: Upload Trivy Config Scan Result
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-dockerfile-report.sarif
          category: trivy-dockerfile-report

      - name: Upload Docker Image IMAGE_TARBALL_NAME
        uses: actions/upload-artifact@v4
        with:
          name: built_image
          path: ${{ env.IMAGE_TARBALL_PATH }}
      
  push-image:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: [test-and-check, scan]
    if: github.ref_name == 'main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Push Docker Image
        run: |
          echo "Hello World"
          # Login to Docker Hub
          # Push Image
          # TODO: How to handle secrets?
